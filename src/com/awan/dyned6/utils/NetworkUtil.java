package com.awan.dyned6.utils;import java.io.IOException;import java.io.InputStream;import javax.microedition.io.HttpConnection;import net.rim.device.api.io.transport.ConnectionDescriptor;import net.rim.device.api.io.transport.ConnectionFactory;import net.rim.device.api.servicebook.ServiceBook;import net.rim.device.api.servicebook.ServiceRecord;import net.rim.device.api.system.CoverageInfo;import net.rim.device.api.system.DeviceInfo;import net.rim.device.api.ui.UiApplication;import com.awan.dyned6.general.Constans;public class NetworkUtil {	public static String getConnectionString() {		if (DeviceInfo.isSimulator()) {			return ";deviceside=true;ConnectionTimeout=" + Constans.getNetworkTimeout();		} else if ((CoverageInfo.getCoverageStatus() & CoverageInfo.COVERAGE_DIRECT) == CoverageInfo.COVERAGE_DIRECT) {			String carrierUid = getCarrierBIBSUid();			if (carrierUid == null) {				// Has carrier coverage, but not BIBS. So use the carrier's TCP				// network				// Didisable, karena gak working di indo, musti sebutin APN				// operator dan makan pulsa				return "";			} else {				// otherwise, use the Uid to construct a valid carrier BIBS				// request				return ";deviceside=false;connectionUID=" + carrierUid + ";ConnectionType=mds-public;ConnectionTimeout=" + Constans.getNetworkTimeout();			}		}		// Check for an MDS connection instead (BlackBerry Enterprise Server)		else if ((CoverageInfo.getCoverageStatus() & CoverageInfo.COVERAGE_MDS) == CoverageInfo.COVERAGE_MDS) {			return ";deviceside=false;ConnectionTimeout=" + Constans.getNetworkTimeout();		}		// If there is no connection available abort to avoid bugging the user		// unnecssarily.		else if (CoverageInfo.getCoverageStatus() == CoverageInfo.COVERAGE_NONE) {			return "";		}		// In theory, all bases are covered so this shouldn't be called.		else {			// logMessage("no other options found, assuming device.");			return ";deviceside=false;ConnectionTimeout=" + Constans.getNetworkTimeout();		}	}	public static String getCarrierBIBSUid() {		ServiceRecord[] records = ServiceBook.getSB().getRecords();		int currentRecord;		for (currentRecord = 0; currentRecord < records.length; currentRecord++) {			if (records[currentRecord].getCid().toLowerCase().equals("ippp")) {				if (records[currentRecord].getName().toLowerCase().indexOf("bibs") >= 0) {					return records[currentRecord].getUid();				}				if (records[currentRecord].getName().toLowerCase().indexOf("bis-b") >= 0) {					return records[currentRecord].getUid();				}			}		}		for (currentRecord = 0; currentRecord < records.length; currentRecord++) {			if (records[currentRecord].getCid().toLowerCase().equals("ippp")) {				if (records[currentRecord].getUid().toUpperCase().indexOf("GPMDSAP0") >= 0) {					return records[currentRecord].getUid();				}			}		}		return null;	}	public static HttpConnection getWebContent(String url) {		ConnectionFactory connFact = new ConnectionFactory();		ConnectionDescriptor connDesc;		connDesc = connFact.getConnection(url + NetworkUtil.getConnectionString());		if (connDesc != null) {			HttpConnection httpConn;			httpConn = (HttpConnection) connDesc.getConnection();			int iResponseCode;			try {				iResponseCode = httpConn.getResponseCode();				if (iResponseCode == HttpConnection.HTTP_OK) {					return httpConn;				}				return null;			} catch (IOException e) {				e.printStackTrace();				return null;			}		}		return null;	}	public static void getWebData(final String url, final WebDataCallBack callback) throws IOException {		Thread t = new Thread(new Runnable() {			public void run() {				// Utils.setDialog(url);				InputStream is = null;				try {					HttpConnection webContent = NetworkUtil.getWebContent(url + getConnectionString());					is = webContent.openInputStream();					final String strResponse = Utils.parseInputStreamToString(is);					UiApplication.getUiApplication().invokeLater(new Runnable() {						public void run() {							callback.onResult(strResponse);						}					});				} catch (final Exception ex) {					UiApplication.getUiApplication().invokeLater(new Runnable() {						public void run() {							callback.onResult("Exception (" + ex.getClass() + "): " + ex.getMessage());						}					});				} finally {					try {						is.close();						is = null;					} catch (Exception e) {										}				}			}		});		t.start();	}}